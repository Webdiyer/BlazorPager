@page "/search"
@page "/search/{page:int}"
@using RazorComponents.Services
@using X.PagedList;
@using Webdiyer.AspNetCore;
@using Microsoft.AspNetCore.Components.RenderTree;
@using Microsoft.AspNetCore.Hosting;
@using System.IO;
@addTagHelper *,Webdiyer.AspNetCore.BlazorPager
@inject IWebHostEnvironment Env

<h1  class="pb-2 mt-4 mb-2 border-bottom">BlazorPager demo: search and pagination</h1>
<div class="row">
    <input type="text" class="form-control col-6" placeholder="Enter company name to search" bind="@CompanyName"/>
    <button type="button" class="btn btn-primary col-1" onclick="@SearchOrders">Search</button>
</div>
<table class="table">
    <thead>
        <tr>
            <th>OrderId</th>
            <th>OrderDate</th>
            <th>CustomerId</th>
            <th>CompanyName</th>
            <th>EmployeeName</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var o in Orders)
        {
            <tr>
                <td>@o.OrderID</td>
                <td>@o.OrderDate.ToShortDateString()</td>
                <td>@o.CustomerID</td>
                <td>@o.CompanyName</td>
                <td>@o.EmployeeName</td>
            </tr>
        }
    </tbody>
</table>
<nav aria-label="Page navigation">
    <div class="container">
        <div class="row justify-content-center">
            <BlazorPager ref="blazorPager"
                         RenderAfterBeginTag="@RenderPagerInfo"
                         TotalItemCount="@Orders.TotalItemCount"
                         OnPageChanged="@ChangePage"
                         PageSize="@PageSize"
                         InitPageIndex="@Page"
                         TagName="ul"
                         AutoHide="false"
                         class="pagination pagination-sm col-7"
                         PagerItemContainerTagName="li"
                         PagerItemContainerCssClass="page-item"
                         CurrentPagerItemContainerCssClass="page-item active"
                         DisabledPagerItemContainerCssClass="page-item disabled"
                         CurrentPagerItemTextFormatString="{0}<span class='sr-only'>current</span>"
                         PagerItemCssClass="page-link"
                         RoutePattern="search/{0}"></BlazorPager>
            <div class="col-2">
                <select class="form-control form-control-sm" bind="@SelectedPage">
                    @for (var i = 1; i <= Orders.PageCount; i++)
                    {
                        <option value="@i">Page @i</option>
                    }
                </select>
            </div> 
            <div class="col-2">
                <select class="form-control form-control-sm" bind="@PageSize">
                    @for(int i = 5; i <= 30; i += 5)
                    {
                        <option value="@i">PageSize:@i</option>
                    }
                </select>
            </div>
        </div>
    </div>
</nav>


@functions{
    [Parameter]
    private int Page { get; set; } = 1;

    BlazorPager blazorPager;

    //company name to bind
    string CompanyName { get; set; }
    //company name to search
    string _compName=null;

    string SelectedPage
    {
        get => Page.ToString();
        set { blazorPager.GoToPage(int.Parse(value)); }
    }
    int _pageSize = 5;
    int PageSize { get=>_pageSize; set { _pageSize = value;GetOrders(Page, value);} }

    IPagedList<Order> Orders { get; set; }

    protected override void OnInit()
    {
        GetOrders(Page, PageSize);
    }

    void RenderPagerInfo(RenderTreeBuilder builder)
    {
        var seq = 0;
        builder.OpenElement(seq, "li");
        builder.AddAttribute(++seq, "class", "page-item disabled mr-3");
        builder.OpenElement(++seq, "a");
        builder.AddAttribute(++seq, "class", "page-link");
        builder.AddAttribute(++seq, "tabindex", "-1");
        builder.AddContent(++seq, "Page:" + blazorPager.CurrentPageIndex + "/" + blazorPager.TotalPageCount);
        builder.CloseElement();
        builder.CloseElement();
    }

    void ChangePage(int pageIndex)
    {
        GetOrders(pageIndex, PageSize);
        SelectedPage = pageIndex.ToString();
    }

    void GetOrders(int pageIndex, int pageSize)
    {
        var path = Path.Combine(Env.WebRootPath, "orders.json");
        var ods=Newtonsoft.Json.JsonConvert.DeserializeObject<Order[]>(File.ReadAllText(path));

        Orders = ods.Where(o=>_compName==null||o.CompanyName.Contains(_compName)).ToPagedList(pageIndex, pageSize);
        StateHasChanged();
    }

    void SearchOrders(UIMouseEventArgs e)
    {
        _compName = CompanyName;
        GetOrders(1, PageSize);
        blazorPager.GoToPage(1);
    }

}
