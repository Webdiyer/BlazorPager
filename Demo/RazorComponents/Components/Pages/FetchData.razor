@page "/fetchdata"
@page "/fetchdata/{page:int}"
@using RazorComponents.Services
@using X.PagedList;
@using Webdiyer.AspNetCore;
@using Microsoft.AspNetCore.Components.RenderTree;

@addTagHelper *,Webdiyer.AspNetCore.BlazorPager
@inject WeatherForecastService ForecastService

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
    <nav aria-label="Page navigation">
        <div class="container">
            <div class="row">
                <BlazorPager ref="blazorPager"
                             RenderAfterBeginTag="@RenderPagerInfo"
                             TotalItemCount="@TotalItemCount"
                             OnPageChanged="@ChangePage"
                             PageSize="@PageSize"
                             InitPageIndex="@Page"
                             TagName="ul"
                             class="pagination pagination-sm col-8 justify-content-end"
                             PagerItemContainerTagName="li"
                             PagerItemContainerCssClass="page-item"
                             CurrentPagerItemContainerCssClass="page-item active"
                             DisabledPagerItemContainerCssClass="page-item disabled"
                             CurrentPagerItemTextFormatString="{0}<span class='sr-only'>current</span>"
                             PagerItemCssClass="page-link"
                             RoutePattern="@RoutePattern"></BlazorPager>
                <div class="col-4">
                    <div class="btn-group">
                        <button type="button" class="btn btn-success btn-sm">Go to page:</button>
                        <button type="button" class="btn btn-success btn-sm dropdown-toggle dropdown-toggle-split" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            <span class="sr-only">Toggle Dropdown</span>
                        </button>
                        <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                            @for (var i = 1; i <= forecasts.PageCount; i++)
                            {
                                var index = i;
                                <a class="dropdown-item@(index==Page?" active":"")" href="@(string.Format(RoutePattern,i))" onclick="@(() => GoToPage(index))">@index</a>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </nav>
}

@functions {
    IPagedList<WeatherForecast> forecasts;

    BlazorPager blazorPager;

    string RoutePattern => "fetchdata/{0}";

    [Parameter]
    int Page { get; set; } = 1;

    int TotalItemCount { get; set; }

    int PageSize { get; set; } = 5;


    protected override async Task OnInitAsync()
    {
        forecasts = await ForecastService.GetForecastAsync(DateTime.Now, Page, PageSize);
        TotalItemCount = forecasts.TotalItemCount;
    }


    void RenderPagerInfo(RenderTreeBuilder builder)
    {
        var seq = 0;
        builder.OpenElement(seq, "li");
        builder.AddAttribute(++seq, "class", "page-item disabled mr-3");
        builder.OpenElement(++seq, "a");
        builder.AddAttribute(++seq, "class", "page-link");
        builder.AddAttribute(++seq, "tabindex", "-1");
        builder.AddContent(++seq, "Page:"+blazorPager.CurrentPageIndex + "/" + blazorPager.TotalPageCount);
        builder.CloseElement();
        builder.CloseElement();
    }

    async void ChangePage(int pageIndex)
    {
        forecasts = await ForecastService.GetForecastAsync(DateTime.Now, pageIndex, PageSize);
        StateHasChanged();
    }

    void GoToPage(int pageIndex)
    {
        blazorPager.GoToPage(pageIndex);
    }

}
