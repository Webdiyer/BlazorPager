@page "/inputbox"
@page "/inputbox/{page:int}"
@using RazorComponents.Services
@using X.PagedList;
@using Webdiyer.AspNetCore;
@using Microsoft.AspNetCore.Components.RenderTree;

@addTagHelper *,Webdiyer.AspNetCore.BlazorPager
@inject WeatherForecastService ForecastService

<h1 class="pb-2 mt-4 mb-2 border-bottom">BlazorPager demo: using input box</h1>


@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
    <nav aria-label="Page navigation">
        <div class="container">
            <div class="row justify-content-center">
                <BlazorPager ref="blazorPager"
                             RenderAfterBeginTag="@RenderPagerInfo"
                             TotalItemCount="@TotalItemCount"
                             OnPageChanged="@ChangePage"
                             PageSize="@PageSize"
                             InitPageIndex="@Page"
                             TagName="ul"
                             class="pagination pagination-sm col-6"
                             PagerItemContainerTagName="li"
                             PagerItemContainerCssClass="page-item"
                             CurrentPagerItemContainerCssClass="page-item active"
                             DisabledPagerItemContainerCssClass="page-item disabled"
                             CurrentPagerItemTextFormatString="{0}<span class='sr-only'>current</span>"
                             PagerItemCssClass="page-link"
                             RoutePattern="@RoutePattern"></BlazorPager>
                <div class="col-2">
                    <div class="input-group input-group-sm mb-3 pr-3">
                        <input type="number" class="form-control" placeholder="Enter page index" bind="@inputPageIndex" aria-label="Page index" aria-describedby="basic-addon2"/>
                        <div class="input-group-append">
                            <button class="btn btn-outline-secondary" type="button" id="button-addon2" onclick="@GoToPage">Go</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </nav>
}

@functions {
    IPagedList<WeatherForecast> forecasts;

    BlazorPager blazorPager;

    string RoutePattern => "inputbox/{0}";

    [Parameter]
    int Page { get; set; } = 1;

    int TotalItemCount { get; set; }

    int PageSize { get; set; } = 5;

    int inputPageIndex { get; set; }


    protected override async Task OnInitAsync()
    {
        forecasts = await ForecastService.GetForecastAsync(DateTime.Now, Page, PageSize);
        TotalItemCount = forecasts.TotalItemCount;
        inputPageIndex = Page;
    }


    void RenderPagerInfo(RenderTreeBuilder builder)
    {
        var seq = 0;
        builder.OpenElement(seq, "li");
        builder.AddAttribute(++seq, "class", "page-item disabled mr-3");
        builder.OpenElement(++seq, "a");
        builder.AddAttribute(++seq, "class", "page-link");
        builder.AddAttribute(++seq, "tabindex", "-1");
        builder.AddContent(++seq, "Page:" + blazorPager.CurrentPageIndex + "/" + blazorPager.TotalPageCount);
        builder.CloseElement();
        builder.CloseElement();
    }

    async void ChangePage(int pageIndex)
    {
        forecasts = await ForecastService.GetForecastAsync(DateTime.Now, pageIndex, PageSize);
        StateHasChanged();
    }

    void GoToPage()
    {
        blazorPager.GoToPage(inputPageIndex);
    }

}
